/********************************************************************************************************
 * @file	boot.link
 *
 * @brief	This is the link file for B85m
 *
 * @author	Driver Group
 * @date	2018
 *
 * @par     Copyright (c) 2018, Telink Semiconductor (Shanghai) Co., Ltd. ("TELINK")
 *          All rights reserved.
 *
 *          Licensed under the Apache License, Version 2.0 (the "License");
 *          you may not use this file except in compliance with the License.
 *          You may obtain a copy of the License at
 *
 *              http://www.apache.org/licenses/LICENSE-2.0
 *
 *          Unless required by applicable law or agreed to in writing, software
 *          distributed under the License is distributed on an "AS IS" BASIS,
 *          WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *          See the License for the specific language governing permissions and
 *          limitations under the License.
 *
 *******************************************************************************************************/
/* to tell the linker the program begin from __start label in cstartup.s, thus do not treat it as a unused symbol */
ENTRY(__start)

SECTIONS
{
    . = 0x0;
    .vectors :
    {
    *(.vectors)
    *(.vectors.*)	/* MUST as follows, when compile with -ffunction-sections -fdata-sections, session name may changed */
    }
    .ram_code :
    {
    *(.ram_code)
    *(.ram_code.*)
    }
	PROVIDE(_ramcode_size_ = . );
	PROVIDE(_ramcode_size_div_16_ = (. + 15 ) / 16);
	PROVIDE(_ramcode_size_div_256_ = (. + 255) / 256);
	PROVIDE(_ramcode_size_div_16_align_256_ = ( (. + 255) / 256) * 16);
	PROVIDE(_ramcode_size_align_256_ = ( (. + 255) / 256) * 256);

    . =  _ramcode_size_align_256_ ; /* >= (_ictag_start_ - 0x840000)*/
	
	.text :
	    {
	    *(.text)
	    *(.text.*)
	    }
	.rodata :
	    {
	    *(.rodata)
	    *(.rodata.*)
	    }
	
	. = (((. + 3) / 4)*4);
		PROVIDE(_rstored_ = . );
	    PROVIDE(_code_size_ = .);
		 
	. = (0x840000 + ((0x900 + _ramcode_size_align_256_) * __LOAD_FLASH) + (0x400 * __LOAD_DUT) + (_rstored_ * __LOAD_RAM));	/* __LOAD_FLASH for MCU RUN IN Flash 0x100 alighned, must greater than or equal to:0x808000 + ram_code_size +  irq_vector(0x100) + IC_tag(0x100) + IC_cache(0x800) == 0x808a00 + ram_code_size */
																													/*  __LOAD_DUT	for MCU RUN IN SRAM ,this setting is used for DUT Test and bin size is limited to 8k*/ 
																													/* __LOAD_RAM   for MCU RUN IN SRAM */

	    .retention_data :
	      AT ( _rstored_ )
	    {
	    . = (((. + 3) / 4)*4);
	    PROVIDE(_retention_data_start_ = . );
	    *(.retention_data)
	    *(.retention_data.*)
	    . = (((. + 3) / 4)*4);
	    PROVIDE(_retention_data_end_ = . );     
	    } 
        PROVIDE(_dstored_ = _rstored_ + _retention_data_end_ - _retention_data_start_); 
      
        .my_code(NOLOAD) :
        {
        *(.spi_slave_buff)
        } 
	    .data :
	      AT ( _dstored_ )
	     {
	. = (((. + 3) / 4)*4);
	     PROVIDE(_start_data_ = . );
	     *(.data);
	     *(.data.*);
	. = (((. + 3) / 4)*4);
	     PROVIDE(_end_data_ = . );
	     } 

	/* irk_stk is 4 word align */
	. = (((. + 15) / 16)*16);
		PROVIDE(_start_bss_ = .);
	    .bss(NOLOAD) :
	    AT ( _start_bss_ )
	    {
	    *(.sbss)
	    *(.sbss.*)
	    *(.bss)
	    *(.bss.*)
	    }
		PROVIDE(_end_bss_ = .);
				
	    .sdk_version :
	    AT ( _dstored_ +  _end_data_ - _start_data_ )
		{
	. = (((. + 3) / 4)*4);
		KEEP(*(.sdk_version));
	    KEEP(*(.sdk_version.*));
		}
		
		PROVIDE(_bin_size_ = _code_size_ + _end_data_ - _start_data_ + _retention_data_end_ - _retention_data_start_  + SIZEOF(.sdk_version) );
		PROVIDE(_bin_size_div_16 = ( _bin_size_ + 15 ) / 16 );
		PROVIDE(_ictag_start_ = 0x840000 + _ramcode_size_align_256_ );
		PROVIDE(_ictag_end_ = 0x840000 + _ramcode_size_align_256_ + 0x100);
}